package phone.wobo.music.local;

import java.io.File;
import java.util.List;

import phone.wobo.music.BaseActivity;
import phone.wobo.music.R;
import phone.wobo.music.bll.DatabaseHelper;
import phone.wobo.music.favorites.FavoritesAdapter;
import phone.wobo.music.model.MusicInfo;
import phone.wobo.music.util.FuncUtils;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

public class LocalActivity extends BaseActivity implements
		android.view.View.OnClickListener {

	private List<MusicInfo> audioList;
	private Context mContext;
	private int LOCAL_LOAD_FINISH = 1;
	private int LOCAL_SCAN_FINISH = 2;
	private FavoritesAdapter adapter;
	private Bundle bundle;
	private ListView lv;
	private TextView local_song_num,tv_msg, txt_cancel_editor;;
	private String songNum;
	private ImageButton btn_scan;
	private ImageView img_check_all,bg_img;
	private View lay_bottom_player;
	private RelativeLayout lay_check_editor, lay_editor;
	private boolean currentIsSelectAll = false;
	private Button btn_delete;
	private ImageButton btn_song_editor;
	private LinearLayout expandable_editor;
	private int currentCheckNumber = 0;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		mContext = LocalActivity.this;
		initView();
		loadData();

	}

	protected void onDestroy() {
		super.onDestroy();

		if (null != mMediaScanner) {
			mMediaScanner.destory();
			mMediaScanner = null;
		}

	};

	private void initView() {
		setContentView(R.layout.act_local);
		setTitle("本地音乐");
		bg_img = (ImageView)findViewById(R.id.bg_img);
		lay_bottom_player = (View) findViewById(R.id.bottomer);
		lay_check_editor = (RelativeLayout) findViewById(R.id.lay_check_editor);
		lay_editor = (RelativeLayout) findViewById(R.id.lay_editor);
		img_check_all = (ImageView) findViewById(R.id.img_check_all);
		img_check_all.setOnClickListener(this);
		btn_song_editor = (ImageButton) findViewById(R.id.btn_song_editor);
		btn_song_editor.setOnClickListener(this);
		txt_cancel_editor = (TextView) findViewById(R.id.txt_cancel_editor);
		txt_cancel_editor.setOnClickListener(this);
		btn_delete = (Button) findViewById(R.id.btn_delete);
		btn_delete.setOnClickListener(this);
		expandable_editor = (LinearLayout) findViewById(R.id.expandable_editor);
		lv = (ListView) findViewById(R.id.ls_song);
		bundle = getIntent().getExtras();
		songNum = bundle.getString("songNum");
		local_song_num = (TextView) findViewById(R.id.local_song_num);
		// 扫描歌曲按钮
		btn_scan = (ImageButton) findViewById(R.id.local_scan);
		btn_scan.setOnClickListener(this);
		adapter = new FavoritesAdapter(this) {
			protected void play(View view, int position) {
				audioList = adapter.getListData();
				if (audioList == null || audioList.size() == 0) {
					showToast("歌曲不存在");
					return;
				}
				playMusic(audioList, position);
				FuncUtils.beginClickAnimation(LocalActivity.this,
						(View) view.getParent(),
						phone.wobo.music.R.drawable.ic_anim_music);
			}

			@Override
			protected void add2List(View view, int position) {
				List<MusicInfo> listMusic = adapter.getListData();
				if (isExistMusic(listMusic)) {
					FuncUtils.beginClickAnimation(LocalActivity.this, view,
							phone.wobo.music.R.drawable.ic_anim_add);
					add2PlayList(listMusic.get(position));
				}
			}

			@Override
			protected void addCheck(boolean isAdd) {

				if (isAdd) {
					currentCheckNumber++;
				} else {
					currentCheckNumber--;
				}
				if (currentCheckNumber < audioList.size()) {
					img_check_all.setImageResource(R.drawable.btn_uncheck);
				} else {
					img_check_all.setImageResource(R.drawable.btn_check);
				}
				((TextView) findViewById(R.id.txt_check_number))
						.setText(String.format(
								getResources().getString(
										R.string.txt_check_number),
								currentCheckNumber));
			}

			
		};
		lv.setAdapter(adapter);
	}
	
	private void loadData() {
		new Thread() {
			@Override
			public void run() {
				audioList = DatabaseHelper.localAudioList();
				handler.sendEmptyMessage(LOCAL_LOAD_FINISH);
			}

		}.start();
	}

	private Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			if (msg.what == LOCAL_LOAD_FINISH) {
				if (audioList == null || audioList.size() == 0) {
					// 提示没有本地歌曲
					TextView msg_tv = (TextView) findViewById(R.id.msg);
					msg_tv.setText("没有本地歌曲");
					msg_tv.setVisibility(View.VISIBLE);
					bg_img.setVisibility(View.VISIBLE);
					local_song_num.setText( "0首歌曲");
				} else {
					if (songNum != null && !songNum.equals("0")) {
						local_song_num.setText(songNum + "首歌曲");
						local_song_num.setVisibility(View.VISIBLE);
					}
				}
				adapter.setListData(audioList);
			} else if (msg.what == LOCAL_SCAN_FINISH) {
				audioList.clear();
				audioList = scanLocalMusic();
				songNum = String.valueOf(audioList.size());
				if (audioList == null || audioList.size() == 0) {
					// 提示没有本地歌曲
					TextView msg_tv = (TextView) findViewById(R.id.msg);
					msg_tv.setText("没有本地歌曲");
					msg_tv.setVisibility(View.VISIBLE);
					bg_img.setVisibility(View.VISIBLE);
					return;
				} else {
					((TextView) findViewById(R.id.msg)).setVisibility(View.GONE);
					bg_img.setVisibility(View.GONE);
					if (songNum != null && !songNum.equals("0")) {
						local_song_num.setText(songNum + "首歌曲");
						local_song_num.setVisibility(View.VISIBLE);
					}
				}
				loading.close();
				adapter.setListData(audioList);
				lv.setVisibility(View.VISIBLE);
			}else {
				super.handleMessage(msg);
			}
		}
	};

	private List<MusicInfo> scanLocalMusic() {
		return DatabaseHelper.scanLocalMusic();
	}
	
	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.local_scan:
			startScanner();
			break;
		case R.id.img_check_all:
			checkAll(v);
			break;
		case R.id.btn_delete:
			deleteHistory();
			break;
		case R.id.btn_song_editor:
			checkEditor(v);
			break;
		case R.id.txt_cancel_editor:
			cancelEditor();
			break;
		default:
			break;
		}
	}
// 扫描本地歌曲
	private void startScanner() {
		((TextView) findViewById(R.id.msg)).setVisibility(View.GONE);
		bg_img.setVisibility(View.GONE);
		lv.setVisibility(View.GONE);
		if (loading.isShowing()) {
			return;
		}
		String scanFilePath = Environment.getExternalStorageDirectory()
				.getAbsolutePath();
		loading.show();
		if (null == mMediaScanner) {
			mMediaScanner = new MediaScanner(LocalActivity.this);
			mMediaScanner.setScanProcessListener(scanMusicFileListener);
		}
		mMediaScanner.start(scanFilePath);
	}
	private MediaScanner mMediaScanner;
	private MediaScanner.ScanProcessListener scanMusicFileListener = new MediaScanner.ScanProcessListener() {

		@Override
		public void onScanProcess(final String dirName) {
			handler.post(new Runnable() {

				@Override
				public void run() {
					loading.show("正在扫描文件:" + dirName);
				}
			});
		}

		@Override
		public void onScanCompleted() {
			// TODO Auto-generated method stub
			
		}

        @Override
        public void onScanFinish() {
            // TODO Auto-generated method stub
            handler.postDelayed(new Runnable() {

                @Override
                public void run() {
                    loading.close();
                    handler.sendEmptyMessageDelayed(LOCAL_SCAN_FINISH, 500);
                }
            }, 1000);
        }
	};
	
	private void checkAll(View v) {
		if (currentCheckNumber == audioList.size()) {
			adapter.selectAll(false);
			((ImageView) v).setImageResource(R.drawable.btn_uncheck);
			currentCheckNumber = 0;
			((TextView) findViewById(R.id.txt_check_number))
					.setText(String
							.format(getResources().getString(
									R.string.txt_check_number),
									currentCheckNumber));
		} else {
			adapter.selectAll(true);
			((ImageView) v).setImageResource(R.drawable.btn_check);
			currentCheckNumber = audioList.size();
			((TextView) findViewById(R.id.txt_check_number))
					.setText(String
							.format(getResources().getString(
									R.string.txt_check_number),
									currentCheckNumber));
		}
		currentIsSelectAll = !currentIsSelectAll;
	}
	
	private void checkEditor(View v) {
		currentCheckNumber = 0;
		((TextView) findViewById(R.id.txt_check_number)).setText(String.format(
				getResources().getString(R.string.txt_check_number), 0));
		lay_bottom_player.setVisibility(View.GONE);
		expandable_editor.setVisibility(View.VISIBLE);
		lay_check_editor.setVisibility(View.GONE);
		lay_editor.setVisibility(View.VISIBLE);
		img_check_all.setImageResource(R.drawable.btn_uncheck);
		adapter.setEditor(true);
	}
	
	private void cancelEditor() {
		currentCheckNumber = 0;
		lay_bottom_player.setVisibility(View.VISIBLE);
		expandable_editor.setVisibility(View.GONE);
		lay_check_editor.setVisibility(View.VISIBLE);
		lay_editor.setVisibility(View.GONE);
		adapter.setEditor(false);
		currentIsSelectAll = false;
	}
	
	private void deleteHistory() {
		final String[] arrayFruit = new String[] { "同时删除歌曲文件" };
		final boolean[] arrayFruitSelected = new boolean[] { false };
		if (currentCheckNumber > 0) {
			new AlertDialog.Builder(this)
					.setTitle("删除下载记录")
					// .setMessage("确定要删除你所选择的歌曲吗？")
					.setMultiChoiceItems(arrayFruit, arrayFruitSelected,
							new DialogInterface.OnMultiChoiceClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which, boolean isChecked) {
									arrayFruitSelected[which] = isChecked;
									Log.d("jing", "jing=" + isChecked);
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {

								}
							})
					.setPositiveButton("确定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									List<MusicInfo> deleteList = adapter
											.getListData();
									for (int i = 0; i < deleteList.size(); i++) {
										if (deleteList.get(i).isSelected()) {
											if (arrayFruitSelected[0]) {
												File file = new File(deleteList
														.get(i).getPath());
												file.delete();
											}
											DatabaseHelper.deleteLocalDatas(audioList.get(i)
													.getPath());
										}
									}
									cancelEditor();
									loadData();
								}
							}).show();
		} else {
			showToast("请选择要删除的歌曲");
		}

	}
	
//	private void deleteLocalMusicDialog(Context context, final int position) {
//		final boolean[] isSelected = new boolean[] { false };
//		Builder dialog = new AlertDialog.Builder(context);
//		dialog.setTitle("删除歌曲");
//		dialog.setMultiChoiceItems(new String[] { "是否删除本地文件" }, isSelected,
//				new DialogInterface.OnMultiChoiceClickListener() {
//
//					@Override
//					public void onClick(DialogInterface dialog, int which,
//							boolean isChecked) {
//						isSelected[which] = isChecked;
//					}
//				});
//
//		dialog.setPositiveButton("确定", new OnClickListener() {
//
//			@Override
//			public void onClick(DialogInterface dialog, int which) {
//				// 删除本地音乐表数据
//				if (!isSelected[0]) {
//					DatabaseHelper.deleteLocalDatas(audioList.get(position)
//							.getPath());
//					audioList.remove(position);
//					songNum = String.valueOf(audioList.size());
//
//				} else {
//					// 彻底删除本地歌曲文件
//					String path = audioList.get(position).getPath();
//					DatabaseHelper.deleteLocalDatas(path);
//					audioList.remove(position);
//					songNum = String.valueOf(audioList.size());
//					LocalMusicUtil.deleteAudioFile(path);
//				}
//				handler.sendEmptyMessage(LOCAL_LOAD_FINISH);
//				dialog.dismiss();
//				adapter.setCurrentPositon(-1);
//			}
//		});
//
//		dialog.setNegativeButton("取消", new OnClickListener() {
//
//			@Override
//			public void onClick(DialogInterface dialog, int which) {
//				dialog.dismiss();
//				adapter.setCurrentPositon(-1);
//			}
//		});
//
//		dialog.create().show();
//	}
}
