package phone.wobo.music.local;

import java.io.File;
import java.util.List;

import phone.wobo.music.BaseActivity;
import phone.wobo.music.R;
import phone.wobo.music.bll.DatabaseHelper;
import phone.wobo.music.favorites.FavoritesAdapter;
import phone.wobo.music.model.MusicInfo;
import phone.wobo.music.util.FuncUtils;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;

public class LocalActivity extends BaseActivity implements android.view.View.OnClickListener
{

	private List<MusicInfo> audioList;
	private Context mContext;
	private int LOCAL_LOAD_FINISH = 1;
	private int LOCAL_SCAN_FINISH = 2;
//	private LocalMusicAdapter mlAdapter;
	private FavoritesAdapter mlAdapter;
	private Bundle bundle;
	private ListView lv;
	private TextView local_song_num;
	private String songNum;
	private Button scan;
	private BroadcastReceiver receiver;

	@Override
	public void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		mContext = LocalActivity.this;
		initView();
		loadData();

		receiver = new BroadcastReceiver()
		{
			@Override
			public void onReceive(Context context, Intent intent)
			{
				if (intent.getAction().equals(
						Intent.ACTION_MEDIA_SCANNER_FINISHED))
				{
					handler.sendEmptyMessage(LOCAL_SCAN_FINISH);
					
				}
			}
		};

		// 注册广播接收
		registerBoradcastReceiver();
		// 扫描歌曲
		scan.setOnClickListener(new View.OnClickListener()
		{
			@Override
			public void onClick(View v)
			{
				if (loading.isShowing()) {
					return;
				}
				String scanFilePath = Environment.getExternalStorageDirectory().getAbsolutePath();
				loading.show();
<<<<<<< .mine
				Intent scanIntent = new Intent(
						Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
				String scanFilePath = Environment.getExternalStorageDirectory()
						.getAbsolutePath();
				scanIntent.setData(Uri.fromFile(new File(scanFilePath
						+ "/wobo/wobomusic/")));
				sendBroadcast(scanIntent);
=======
				/*Intent scanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
				scanIntent.setData(Uri.fromFile(new File(scanFilePath + "/wobomusic/")));
				sendBroadcast(scanIntent);*/
				
				if(null == mMediaScanner){
					mMediaScanner = new MediaScanner(LocalActivity.this);
					mMediaScanner.setScanProcessListener(scanMusicFileListener);
				}
				
				mMediaScanner.start(scanFilePath);
>>>>>>> .r3637
			}
		});

	}
	
	private MediaScanner mMediaScanner;
	private MediaScanner.ScanProcessListener scanMusicFileListener = new MediaScanner.ScanProcessListener() {
		
		@Override
		public void onScanProcess(final String dirName) {
			// TODO Auto-generated method stub
			handler.post(new Runnable() {
				
				@Override
				public void run() {
					// TODO Auto-generated method stub
					loading.show("正在扫描文件:"+dirName);
				}
			});
		}
		
		@Override
		public void onScanCompleted() {
			// TODO Auto-generated method stub
			handler.post(new Runnable() {
				
				@Override
				public void run() {
					// TODO Auto-generated method stub
					loading.close();
					handler.sendEmptyMessage(LOCAL_SCAN_FINISH);
				}
			});
		}
	};
	
	protected void onDestroy() {
		super.onDestroy();
		
		if(null != mMediaScanner){
			mMediaScanner.destory();
			mMediaScanner = null;
		}
		
		if(null != receiver){
			unregisterReceiver(receiver);
			receiver = null;
		}
	};

	private void initView()
	{
		setContentView(R.layout.act_local);
		setTitle(R.string.locol_music);
		lv = (ListView) findViewById(R.id.ls_song);
		bundle = getIntent().getExtras();
		songNum = bundle.getString("songNum");
		local_song_num = (TextView) findViewById(R.id.local_song_num);

		// 扫描歌曲按钮
		scan = (Button) findViewById(R.id.local_scan);

		mlAdapter = new FavoritesAdapter(this)
		{
			protected void play(View view, int position)
			{
				if (audioList == null || audioList.size() == 0)
				{
					showToast("歌曲不存在");
					return;
				}
				playMusic(audioList, position);
				FuncUtils.beginClickAnimation(LocalActivity.this,
						(View) view.getParent(),
						phone.wobo.music.R.drawable.ic_anim_music);
			}

			protected void addPlayList(View view, int position)
			{
				FuncUtils.beginClickAnimation(LocalActivity.this, view,
						phone.wobo.music.R.drawable.ic_anim_add);
				addPlayListHandler(position);
				showToast("已添加");
			}

			protected void showLocalMusicInfo(int position)
			{
				if (audioList == null || audioList.size() == 0)
				{
					showToast("歌曲不存在");
					return;
				}
				/*
				 * 弹出歌曲信息对话框
				 */
				showMusicInfoDialog(mContext, position);
			}

			protected void deleteLocalSong(int position)
			{
				deleteLocalMusicDialog(mContext, position);
				showToast("已删除");
			}
		};

		lv.setAdapter(mlAdapter);
	}

	private void addPlayListHandler(int position)
	{
		mlAdapter.setCurrentPositon(-1);
	}

	private void deleteLocalMusicDialog(Context context, final int position)
	{
		final boolean[] isSelected = new boolean[] { false };
		Builder dialog = new AlertDialog.Builder(context);
		dialog.setTitle("删除歌曲");
		dialog.setMultiChoiceItems(new String[] { "是否删除本地文件" }, isSelected,
				new DialogInterface.OnMultiChoiceClickListener()
				{

					@Override
					public void onClick(DialogInterface dialog, int which,
							boolean isChecked)
					{
						isSelected[which] = isChecked;
					}
				});

		dialog.setPositiveButton("确定", new OnClickListener()
		{

			@Override
			public void onClick(DialogInterface dialog, int which)
			{
				// 删除本地音乐表数据
				if (!isSelected[0])
				{
					DatabaseHelper.deleteLocalDatas(audioList.get(position)
							.getPath());
					audioList.remove(position);
					songNum = String.valueOf(audioList.size());

				} else
				{
					// 彻底删除本地歌曲文件
					String path = audioList.get(position).getPath();
					DatabaseHelper.deleteLocalDatas(path);
					audioList.remove(position);
					songNum = String.valueOf(audioList.size());
					LocalMusicUtil.deleteAudioFile(path);
				}
				handler.sendEmptyMessage(LOCAL_LOAD_FINISH);
				dialog.dismiss();
				mlAdapter.setCurrentPositon(-1);
			}
		});

		dialog.setNegativeButton("取消", new OnClickListener()
		{

			@Override
			public void onClick(DialogInterface dialog, int which)
			{
				dialog.dismiss();
				mlAdapter.setCurrentPositon(-1);
			}
		});

		dialog.create().show();
	}

	private void showMusicInfoDialog(Context context, int position)
	{

		MusicInfo mi = audioList.get(position);
		String name = mi.getName();
		String artist = mi.getArtist();

		final Dialog dialog = new Dialog(LocalActivity.this);
		dialog.setContentView(R.layout.lay_local_show_music_info);

		TextView tv_artist = (TextView) dialog
				.findViewById(R.id.tv_local_show_musicinfo_artist_r);
		TextView tv_songname = (TextView) dialog
				.findViewById(R.id.tv_local_show_musicinfo_songname_r);
		tv_artist.setText(artist);
		tv_songname.setText(name);
		dialog.show();

		Button btn_confirm = (Button) dialog
				.findViewById(R.id.tv_local_show_musicinfo_confirm);
		btn_confirm.setOnClickListener(new View.OnClickListener()
		{

			@Override
			public void onClick(View v)
			{
				dialog.dismiss();
				mlAdapter.setCurrentPositon(-1);
			}
		});

		Button btn_cancel = (Button) dialog
				.findViewById(R.id.tv_local_show_musicinfo_cancel);
		btn_cancel.setOnClickListener(new View.OnClickListener()
		{

			@Override
			public void onClick(View v)
			{
				dialog.dismiss();
				mlAdapter.setCurrentPositon(-1);
			}
		});
	}

	private void loadData()
	{
		new Thread()
		{

			@Override
			public void run()
			{
				audioList = DatabaseHelper.localAudioList();
				handler.sendEmptyMessage(LOCAL_LOAD_FINISH);
			}

		}.start();
	}

	private Handler handler = new Handler()
	{
		@Override
		public void handleMessage(Message msg)
		{
			if (msg.what == LOCAL_LOAD_FINISH)
			{
				if (audioList == null || audioList.size() == 0)
				{
					// 提示没有本地歌曲
					TextView msg_tv = (TextView) findViewById(R.id.msg);
					msg_tv.setText("没有本地歌曲");
					msg_tv.setVisibility(View.VISIBLE);
					return;
				} else
				{
					if (songNum != null && !songNum.equals("0"))
					{
						local_song_num.setText(songNum + "首歌曲");
						local_song_num.setVisibility(View.VISIBLE);
					}
				}
				mlAdapter.setListData(audioList);
			}else if(msg.what == LOCAL_SCAN_FINISH)
			{
				audioList.clear();
				audioList = scanLocalMusic();
				songNum = String.valueOf(audioList.size());
				//
				if (audioList == null || audioList.size() == 0)
				{
					// 提示没有本地歌曲
					TextView msg_tv = (TextView) findViewById(R.id.msg);
					msg_tv.setText("没有本地歌曲");
					msg_tv.setVisibility(View.VISIBLE);
					return;
				} else
				{
					if (songNum != null && !songNum.equals("0"))
					{
						local_song_num.setText(songNum + "首歌曲");
						local_song_num.setVisibility(View.VISIBLE);
					}
				}
				loading.close();
				mlAdapter.setListData(audioList);
			}
			
			else
			{
				super.handleMessage(msg);
			}
		}
	};

	private List<MusicInfo> scanLocalMusic()
	{
		return DatabaseHelper.scanLocalMusic();
		// handler.sendEmptyMessage(LOCAL_LOAD_FINISH);
	}

	private void registerBoradcastReceiver()
	{
		IntentFilter filter = new IntentFilter();
		filter.addAction(Intent.ACTION_MEDIA_SCANNER_FINISHED);
		filter.addDataScheme("file");
		registerReceiver(receiver, filter);
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public File getSharedPrefsFile(String name) {
		// TODO Auto-generated method stub
		return null;
	}

}
